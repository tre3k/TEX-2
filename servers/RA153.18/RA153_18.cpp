/*----- PROTECTED REGION ID(RA153_18.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        RA153_18.cpp
//
// description : C++ source for the RA153_18 class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               RA153_18 are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// PNPI Kirill Pshenichny (c) 2019
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <RA153_18.h>
#include <RA153_18Class.h>

/*----- PROTECTED REGION END -----*/	//	RA153_18.cpp

/**
 *  RA153_18 class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  Stop          |  stop
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  rPosition  |  Tango::DevDouble	Scalar
//  aPosition  |  Tango::DevDouble	Scalar
//  LeftEnd    |  Tango::DevBoolean	Scalar
//  RightEnd   |  Tango::DevBoolean	Scalar
//================================================================

namespace RA153_18_ns
{
/*----- PROTECTED REGION ID(RA153_18::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	RA153_18::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : RA153_18::RA153_18()
 *	Description : Constructors for a Tango device
 *                implementing the classRA153_18
 */
//--------------------------------------------------------
RA153_18::RA153_18(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(RA153_18::constructor_1) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	RA153_18::constructor_1
}
//--------------------------------------------------------
RA153_18::RA153_18(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(RA153_18::constructor_2) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	RA153_18::constructor_2
}
//--------------------------------------------------------
RA153_18::RA153_18(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(RA153_18::constructor_3) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	RA153_18::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : RA153_18::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void RA153_18::delete_device()
{
	DEBUG_STREAM << "RA153_18::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(RA153_18::delete_device) ENABLED START -----*/

	//	Delete device allocated objects

	/*----- PROTECTED REGION END -----*/	//	RA153_18::delete_device
	delete[] attr_rPosition_read;
	delete[] attr_aPosition_read;
	delete[] attr_LeftEnd_read;
	delete[] attr_RightEnd_read;
}

//--------------------------------------------------------
/**
 *	Method      : RA153_18::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void RA153_18::init_device()
{
	DEBUG_STREAM << "RA153_18::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(RA153_18::init_device_before) ENABLED START -----*/

		//	Initialization before get_device_property() call

		/*----- PROTECTED REGION END -----*/	//	RA153_18::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_rPosition_read = new Tango::DevDouble[1];
	attr_aPosition_read = new Tango::DevDouble[1];
	attr_LeftEnd_read = new Tango::DevBoolean[1];
	attr_RightEnd_read = new Tango::DevBoolean[1];
	/*----- PROTECTED REGION ID(RA153_18::init_device) ENABLED START -----*/

		//	Initialize device

		sp = static_cast<RA153_18Class *>(get_device_class())->sp;
		if(sp == NULL){
			static_cast<RA153_18Class *>(get_device_class())->sp = new SP::SerialPort(device.c_str());
			sp = static_cast<RA153_18Class *>(get_device_class())->sp;
		}

		mc = new Motor::MotorClass(sp->sp);
		mc->setDevice(controllerNumber);
		mc->setChannel(channel);

		if(!mc->cmdEcho()){
			device_state = Tango::FAULT;
		}


		/* sensor initialisation */
#ifdef DEBUG_MESSAGE
		printf("Sensor configure: \n");
#endif
		Motor::sSensorConfig s_sensor_config,srx_sensor_config;
		s_sensor_config.channel = (char) (channel & 0xff);
		s_sensor_config.nbytes_nbits = mc->setNbitsNbytes(26,4);
		s_sensor_config.nshift = 0x06;
		// gray code
		if(true) {
			s_sensor_config.flags = (char) (Motor::F_SENSOR_ENABLE | Motor::F_SENSOR_GRAYCODE);
		}else{
			s_sensor_config.flags = (char) (Motor::F_SENSOR_ENABLE | Motor::F_SENSOR_GRAYCODE);
		}
		s_sensor_config.mask = 0x00000000;
		srx_sensor_config = s_sensor_config;
		mc->cmdSensorWconfig(&srx_sensor_config);


		/* motor initialisation */
#ifdef DEBUG_MESSAGE
		printf("Motor configure: \n");
#endif
		Motor::sMotorConfig s_motor_config, srx_motor_config;
		s_motor_config.channel = (char) (channel & 0xff);
		s_motor_config.flags = Motor::F_MOTOR_POWER_ON;   // need test! may be just enable flag?
		s_motor_config.accel = (char) (accelerate & 0xff);
		s_motor_config.stepping = (char) (stepping & 0xff);
		s_motor_config.max_idx = speed;
		srx_motor_config = s_motor_config;
		mc->cmdMotorWconfig(&srx_motor_config);

		stop();

		/*----- PROTECTED REGION END -----*/	//	RA153_18::init_device
}

//--------------------------------------------------------
/**
 *	Method      : RA153_18::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void RA153_18::get_device_property()
{
	/*----- PROTECTED REGION ID(RA153_18::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members

	/*----- PROTECTED REGION END -----*/	//	RA153_18::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("Device"));
	dev_prop.push_back(Tango::DbDatum("Channel"));
	dev_prop.push_back(Tango::DbDatum("Accelerate"));
	dev_prop.push_back(Tango::DbDatum("Speed"));
	dev_prop.push_back(Tango::DbDatum("ControllerNumber"));
	dev_prop.push_back(Tango::DbDatum("Stepping"));
	dev_prop.push_back(Tango::DbDatum("StepsToUnit"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on RA153_18Class to get class property
		Tango::DbDatum	def_prop, cl_prop;
		RA153_18Class	*ds_class =
			(static_cast<RA153_18Class *>(get_device_class()));
		int	i = -1;

		//	Try to initialize Device from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  device;
		else {
			//	Try to initialize Device from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  device;
		}
		//	And try to extract Device value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  device;

		//	Try to initialize Channel from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  channel;
		else {
			//	Try to initialize Channel from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  channel;
		}
		//	And try to extract Channel value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  channel;

		//	Try to initialize Accelerate from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  accelerate;
		else {
			//	Try to initialize Accelerate from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  accelerate;
		}
		//	And try to extract Accelerate value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  accelerate;

		//	Try to initialize Speed from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  speed;
		else {
			//	Try to initialize Speed from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  speed;
		}
		//	And try to extract Speed value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  speed;

		//	Try to initialize ControllerNumber from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  controllerNumber;
		else {
			//	Try to initialize ControllerNumber from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  controllerNumber;
		}
		//	And try to extract ControllerNumber value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  controllerNumber;

		//	Try to initialize Stepping from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  stepping;
		else {
			//	Try to initialize Stepping from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  stepping;
		}
		//	And try to extract Stepping value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  stepping;

		//	Try to initialize StepsToUnit from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  stepsToUnit;
		else {
			//	Try to initialize StepsToUnit from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  stepsToUnit;
		}
		//	And try to extract StepsToUnit value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  stepsToUnit;

	}

	/*----- PROTECTED REGION ID(RA153_18::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	RA153_18::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : RA153_18::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void RA153_18::always_executed_hook()
{
	DEBUG_STREAM << "RA153_18::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(RA153_18::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests

	/*----- PROTECTED REGION END -----*/	//	RA153_18::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : RA153_18::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void RA153_18::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "RA153_18::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(RA153_18::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	RA153_18::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : RA153_18::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void RA153_18::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "RA153_18::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(RA153_18::write_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	RA153_18::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute rPosition related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void RA153_18::read_rPosition(Tango::Attribute &attr)
{
	DEBUG_STREAM << "RA153_18::read_rPosition(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(RA153_18::read_rPosition) ENABLED START -----*/

	mStatus = mc->getMotorStatus();
	*attr_rPosition_read = (double) (mStatus.leftSteps/stepsToUnit);
	if(*attr_rPosition_read == 0.0){
		device_state = Tango::ON;
		device_status = Tango::STOP;
	}

	attr.set_value(attr_rPosition_read);

	/*----- PROTECTED REGION END -----*/	//	RA153_18::read_rPosition
}
//--------------------------------------------------------
/**
 *	Write attribute rPosition related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void RA153_18::write_rPosition(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "RA153_18::write_rPosition(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(RA153_18::write_rPosition) ENABLED START -----*/

	double value = w_val;
	if(value > 0 ){
		mc->moveToLeft(value*stepsToUnit);
	}else{
		value = -value;
		mc->moveToRight(value*stepsToUnit);
	}

	device_state = Tango::MOVING;

	/*----- PROTECTED REGION END -----*/	//	RA153_18::write_rPosition
}
//--------------------------------------------------------
/**
 *	Read attribute aPosition related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void RA153_18::read_aPosition(Tango::Attribute &attr)
{
	DEBUG_STREAM << "RA153_18::read_aPosition(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(RA153_18::read_aPosition) ENABLED START -----*/

	*attr_aPosition_read = (double)(mStatus.sensorValue);

	attr.set_value(attr_aPosition_read);

	/*----- PROTECTED REGION END -----*/	//	RA153_18::read_aPosition
}
//--------------------------------------------------------
/**
 *	Write attribute aPosition related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void RA153_18::write_aPosition(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "RA153_18::write_aPosition(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(RA153_18::write_aPosition) ENABLED START -----*/


	/*----- PROTECTED REGION END -----*/	//	RA153_18::write_aPosition
}
//--------------------------------------------------------
/**
 *	Read attribute LeftEnd related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void RA153_18::read_LeftEnd(Tango::Attribute &attr)
{
	DEBUG_STREAM << "RA153_18::read_LeftEnd(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(RA153_18::read_LeftEnd) ENABLED START -----*/

	*attr_LeftEnd_read = mStatus.leftEnd;
	attr.set_value(attr_LeftEnd_read);

	/*----- PROTECTED REGION END -----*/	//	RA153_18::read_LeftEnd
}
//--------------------------------------------------------
/**
 *	Read attribute RightEnd related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void RA153_18::read_RightEnd(Tango::Attribute &attr)
{
	DEBUG_STREAM << "RA153_18::read_RightEnd(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(RA153_18::read_RightEnd) ENABLED START -----*/

	*attr_RightEnd_read = mStatus.rightEnd;
	attr.set_value(attr_RightEnd_read);

	/*----- PROTECTED REGION END -----*/	//	RA153_18::read_RightEnd
}

//--------------------------------------------------------
/**
 *	Method      : RA153_18::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void RA153_18::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(RA153_18::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	RA153_18::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Stop related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void RA153_18::stop()
{
	DEBUG_STREAM << "RA153_18::Stop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(RA153_18::stop) ENABLED START -----*/

#ifdef DEBUG_MESSAGE
	printf("STOP MOTION!\n");
#endif
	mc->stopMotion();
	device_state = Tango::ON;
	device_status = Tango::STOP;

	/*----- PROTECTED REGION END -----*/	//	RA153_18::stop
}
//--------------------------------------------------------
/**
 *	Method      : RA153_18::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void RA153_18::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(RA153_18::add_dynamic_commands) ENABLED START -----*/

	//	Add your own code to create and add dynamic commands if any

	/*----- PROTECTED REGION END -----*/	//	RA153_18::add_dynamic_commands
}

/*----- PROTECTED REGION ID(RA153_18::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	RA153_18::namespace_ending
} //	namespace
